/**
 * Test de la correction du syst√®me de unmute automatique
 * Ce script simule des comptes mut√©s et v√©rifie qu'ils sont bien unmut√©s apr√®s expiration
 */

const { runAutomationScan } = require('./services/automation');
const { logToFile } = require('./services/logs-optimized');

// Simulation des d√©pendances du serveur
const mutedAccounts = new Map();

// Ajouter des comptes mut√©s avec diff√©rentes dur√©es d'expiration
const now = Date.now();
mutedAccounts.set('test_account_1', now - 60000); // Expir√© depuis 1 minute
mutedAccounts.set('test_account_2', now + 30000); // Expire dans 30 secondes
mutedAccounts.set('test_account_3', now + 120000); // Expire dans 2 minutes

console.log('üß™ Test de la correction du syst√®me de unmute');
console.log(`üìä √âtat initial: ${mutedAccounts.size} comptes mut√©s`);

// Afficher l'√©tat initial
for (const [accountId, muteUntil] of mutedAccounts.entries()) {
    const timeLeft = muteUntil - now;
    const status = timeLeft <= 0 ? 'EXPIR√â' : `${Math.round(timeLeft/1000)}s restants`;
    console.log(`   - ${accountId}: ${status}`);
}

// D√©pendances simul√©es
const mockDependencies = {
    getAllConnectedAccounts: () => [
        { id: 'test_account_1', username: 'test1', authMethod: 'oauth2' },
        { id: 'test_account_2', username: 'test2', authMethod: 'oauth2' },
        { id: 'test_account_3', username: 'test3', authMethod: 'oauth2' }
    ],
    watchAccounts: [],
    lastTweetId: {},
    isAutomationEnabled: false, // D√©sactiv√© pour √©viter le scan complet
    automationActive: false,
    rateLimitState: {},
    performedActionsDB: {},
    mutedAccounts: mutedAccounts, // R√©f√©rence partag√©e
    getRwClientById: () => null,
    generateUniqueAIComments: () => 'Test comment',
    markActionAsPerformed: () => {},
    hasActionBeenPerformed: () => false,
    logSystemAction: (msg) => console.log(`[SYSTEM] ${msg}`),
    pushLiveLog: (msg) => console.log(`[LIVE] ${msg}`),
    randomDelay: () => Promise.resolve(),
    logToFile: (msg) => console.log(`[LOG] ${msg}`)
};

// Ex√©cuter le test
async function runTest() {
    console.log('\nüöÄ Lancement du test...\n');
    
    try {
        await runAutomationScan(mockDependencies);
        
        console.log('\nüìä √âtat final:');
        console.log(`   Comptes mut√©s restants: ${mutedAccounts.size}`);
        
        if (mutedAccounts.size > 0) {
            for (const [accountId, muteUntil] of mutedAccounts.entries()) {
                const timeLeft = muteUntil - Date.now();
                console.log(`   - ${accountId}: ${Math.round(timeLeft/1000)}s restants`);
            }
        }
        
        // V√©rifier que le compte expir√© a √©t√© supprim√©
        if (!mutedAccounts.has('test_account_1')) {
            console.log('\n‚úÖ SUCC√àS: Le compte expir√© a √©t√© automatiquement unmuted');
        } else {
            console.log('\n‚ùå √âCHEC: Le compte expir√© n\'a pas √©t√© unmuted');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur pendant le test:', error.message);
    }
}

runTest();
