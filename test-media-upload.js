const { TwitterApi } = require('twitter-api-v2');
const fs = require('fs');
const path = require('path');

/**
 * Script de test pour v√©rifier l'upload d'images avec les nouveaux scopes media.write
 */
async function testMediaUpload() {
    console.log('üß™ TEST UPLOAD M√âDIA - V√©rification scopes media.write\n');
    
    try {
        // Charger les utilisateurs OAuth2
        const oauth2UsersPath = path.join(__dirname, 'oauth2-users.json');
        if (!fs.existsSync(oauth2UsersPath)) {
            console.log('‚ùå Fichier oauth2-users.json non trouv√©');
            return;
        }
        
        const oauth2Data = JSON.parse(fs.readFileSync(oauth2UsersPath, 'utf8'));
        console.log(`üìã ${oauth2Data.length} comptes OAuth2 trouv√©s\n`);
        
        // V√©rifier les images disponibles
        const imagesDir = path.join(__dirname, 'reply-images');
        const images = fs.readdirSync(imagesDir).filter(f => 
            ['.jpg', '.jpeg', '.png', '.gif', '.webp'].includes(path.extname(f).toLowerCase())
        );
        
        if (images.length === 0) {
            console.log('‚ùå Aucune image trouv√©e dans reply-images/');
            return;
        }
        
        console.log(`üñºÔ∏è  ${images.length} images disponibles pour test\n`);
        
        // Tester chaque compte
        for (const [userId, userData] of oauth2Data) {
            console.log(`\nüë§ Test compte: @${userData.username} (${userId})`);
            
            // V√©rifier les scopes
            const hasMediaWrite = userData.scopesGranted && userData.scopesGranted.includes('media.write');
            console.log(`   üìã Scopes: ${userData.scopesGranted ? userData.scopesGranted.join(', ') : 'Non d√©finis'}`);
            console.log(`   üîë media.write: ${hasMediaWrite ? '‚úÖ OUI' : '‚ùå NON'}`);
            
            if (!hasMediaWrite) {
                console.log('   ‚ö†Ô∏è  Reconnexion n√©cessaire avec nouveaux scopes');
                continue;
            }
            
            // Cr√©er client Twitter
            try {
                const client = new TwitterApi({
                    clientId: process.env.X_CLIENT_ID,
                    clientSecret: process.env.X_CLIENT_SECRET
                });
                
                const rwClient = client.login({
                    accessToken: userData.accessToken,
                    refreshToken: userData.refreshToken
                });
                
                // Tester upload d'une image
                const testImage = images[0];
                const imagePath = path.join(imagesDir, testImage);
                const imageBuffer = fs.readFileSync(imagePath);
                const ext = path.extname(testImage).toLowerCase();
                
                const mimeMap = {
                    '.jpg': 'image/jpeg',
                    '.jpeg': 'image/jpeg',
                    '.png': 'image/png',
                    '.gif': 'image/gif',
                    '.webp': 'image/webp'
                };
                const mimeType = mimeMap[ext] || 'application/octet-stream';
                
                console.log(`   üß™ Test upload: ${testImage} (${mimeType})`);
                
                // Essayer API v2 d'abord
                try {
                    const uploadResult = await rwClient.v2.uploadMedia(imageBuffer, { 
                        media_type: mimeType 
                    });
                    console.log(`   ‚úÖ Upload v2 r√©ussi: ${uploadResult}`);
                } catch (v2Error) {
                    console.log(`   ‚ö†Ô∏è  √âchec v2: ${v2Error.message}`);
                    
                    // Fallback vers v1
                    try {
                        const uploadResult = await rwClient.v1.uploadMedia(imageBuffer, { mimeType });
                        console.log(`   ‚úÖ Upload v1 r√©ussi: ${uploadResult}`);
                    } catch (v1Error) {
                        console.log(`   ‚ùå √âchec v1: ${v1Error.message}`);
                        
                        if (v1Error.message.includes('403')) {
                            console.log('   üí° Erreur 403: Permissions insuffisantes');
                        }
                    }
                }
                
            } catch (clientError) {
                console.log(`   ‚ùå Erreur cr√©ation client: ${clientError.message}`);
            }
        }
        
        console.log('\nüìã R√âSUM√â:');
        console.log('1. Les comptes sans media.write doivent √™tre reconnect√©s');
        console.log('2. Utilisez le lien OAuth2 avec les nouveaux scopes');
        console.log('3. Une fois reconnect√©s, les images devraient fonctionner');
        
    } catch (error) {
        console.error('‚ùå Erreur durant le test:', error.message);
    }
}

// Ex√©cuter le test
if (require.main === module) {
    require('dotenv').config();
    testMediaUpload();
}

module.exports = { testMediaUpload };
