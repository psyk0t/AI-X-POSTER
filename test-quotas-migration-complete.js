#!/usr/bin/env node

/**
 * üéØ TEST COMPLET DE MIGRATION DES QUOTAS
 * Validation automatique de la suppression de l'ancien syst√®me et du nouveau syst√®me par compte
 */

const fs = require('fs');
const path = require('path');

console.log('üéØ TEST COMPLET - MIGRATION QUOTAS PAR COMPTE');
console.log('='.repeat(60));

let totalTests = 0;
let passedTests = 0;
let failedTests = 0;

function logTest(name, success, details = '') {
    totalTests++;
    if (success) {
        console.log(`‚úÖ ${name}`);
        if (details) console.log(`   ${details}`);
        passedTests++;
    } else {
        console.log(`‚ùå ${name}`);
        if (details) console.log(`   ${details}`);
        failedTests++;
    }
}

// üßπ PHASE 1: V√âRIFICATION SUPPRESSION ANCIEN SYST√àME
console.log('\nüßπ PHASE 1: V√âRIFICATION SUPPRESSION ANCIEN SYST√àME');
console.log('-'.repeat(50));

try {
    // Test 1: V√©rifier que l'ancien import a √©t√© supprim√© du serveur
    const serverContent = fs.readFileSync(path.join(__dirname, 'server.js'), 'utf-8');
    const hasOldImport = serverContent.includes("require('./services/quotas')");
    logTest('Ancien import quotas.js supprim√© du serveur', !hasOldImport, 
        hasOldImport ? 'ERREUR: Import encore pr√©sent' : 'Import correctement supprim√©');

    // Test 2: V√©rifier que l'ancienne interface a √©t√© supprim√©e
    const indexContent = fs.readFileSync(path.join(__dirname, 'index.html'), 'utf-8');
    const hasOldUI = indexContent.includes('Quota management') || indexContent.includes('quotaGlobalInput');
    logTest('Ancienne interface quotas supprim√©e', !hasOldUI,
        hasOldUI ? 'ERREUR: Ancienne interface encore pr√©sente' : 'Interface correctement supprim√©e');

    // Test 3: V√©rifier que le nouveau syst√®me est pr√©sent
    const hasNewUI = indexContent.includes('Gestion des Quotas par Compte') && 
                     indexContent.includes('loadQuotasPerAccount');
    logTest('Nouvelle interface quotas par compte pr√©sente', hasNewUI,
        hasNewUI ? 'Interface moderne correctement impl√©ment√©e' : 'ERREUR: Nouvelle interface manquante');

} catch (error) {
    logTest('V√©rification fichiers syst√®me', false, `Erreur: ${error.message}`);
}

// üîß PHASE 2: VALIDATION DU NOUVEAU SYST√àME
console.log('\nüîß PHASE 2: VALIDATION DU NOUVEAU SYST√àME');
console.log('-'.repeat(50));

try {
    // Test 4: V√©rifier l'existence du service quotas par compte
    const quotasPerAccountPath = path.join(__dirname, 'services', 'quotas-per-account.js');
    const quotasPerAccountExists = fs.existsSync(quotasPerAccountPath);
    logTest('Service quotas-per-account.js existe', quotasPerAccountExists,
        quotasPerAccountExists ? 'Service correctement cr√©√©' : 'ERREUR: Service manquant');

    if (quotasPerAccountExists) {
        const quotasPerAccountContent = fs.readFileSync(quotasPerAccountPath, 'utf-8');
        
        // Test 5: V√©rifier les fonctions essentielles
        const hasEssentialFunctions = [
            'loadAllAccountQuotas',
            'getQuotasForAccount', 
            'initializeAccountQuotas',
            'canPerformActionForAccount',
            'consumeActionForAccount'
        ].every(func => quotasPerAccountContent.includes(func));
        
        logTest('Fonctions essentielles pr√©sentes', hasEssentialFunctions,
            hasEssentialFunctions ? 'Toutes les fonctions critiques impl√©ment√©es' : 'ERREUR: Fonctions manquantes');

        // Test 6: V√©rifier la configuration par d√©faut
        const hasDefaultConfig = quotasPerAccountContent.includes('DEFAULT_ACCOUNT_QUOTAS') &&
                                 quotasPerAccountContent.includes('dailyLimit: 300');
        logTest('Configuration par d√©faut mise √† jour', hasDefaultConfig,
            hasDefaultConfig ? 'Limite journali√®re augment√©e √† 300' : 'ERREUR: Configuration obsol√®te');
    }

} catch (error) {
    logTest('Validation nouveau syst√®me', false, `Erreur: ${error.message}`);
}

// üåê PHASE 3: VALIDATION DES APIS
console.log('\nüåê PHASE 3: VALIDATION DES APIS');
console.log('-'.repeat(50));

try {
    // Test 7: V√©rifier les nouvelles routes API dans le serveur
    const serverContent = fs.readFileSync(path.join(__dirname, 'server.js'), 'utf-8');
    
    const hasQuotasAPIs = [
        '/api/quotas/summary',
        '/api/quotas/account/:accountId',
        '/api/quotas/account/:accountId/update',
        '/api/quotas/defaults/update'
    ].every(route => serverContent.includes(route));
    
    logTest('APIs de gestion des quotas pr√©sentes', hasQuotasAPIs,
        hasQuotasAPIs ? 'Toutes les routes API impl√©ment√©es' : 'ERREUR: Routes API manquantes');

    // Test 8: V√©rifier l'import du nouveau service
    const hasNewImport = serverContent.includes("require('./services/quotas-per-account')");
    logTest('Import du nouveau service quotas', hasNewImport,
        hasNewImport ? 'Service correctement import√©' : 'ERREUR: Import manquant');

} catch (error) {
    logTest('Validation APIs', false, `Erreur: ${error.message}`);
}

// üìä PHASE 4: TEST DU SYST√àME EN FONCTIONNEMENT
console.log('\nüìä PHASE 4: TEST DU SYST√àME EN FONCTIONNEMENT');
console.log('-'.repeat(50));

try {
    // Test 9: Charger et tester le service quotas par compte
    const { 
        loadAllAccountQuotas,
        initializeAccountQuotas,
        getQuotasForAccount,
        getAllAccountsQuotasSummary 
    } = require('./services/quotas-per-account');

    // Test d'initialisation d'un compte test
    const testAccountId = 'test_account_123';
    const initializedQuotas = initializeAccountQuotas(testAccountId, 'oauth2');
    
    logTest('Initialisation quotas nouveau compte', !!initializedQuotas,
        initializedQuotas ? `Compte ${testAccountId} initialis√© avec ${initializedQuotas.dailyLimit} actions/jour` : 'ERREUR: √âchec initialisation');

    // Test de r√©cup√©ration des quotas
    const retrievedQuotas = getQuotasForAccount(testAccountId);
    logTest('R√©cup√©ration quotas compte', !!retrievedQuotas,
        retrievedQuotas ? `Quotas r√©cup√©r√©s: ${retrievedQuotas.dailyLimit} limite journali√®re` : 'ERREUR: √âchec r√©cup√©ration');

    // Test du r√©sum√© global
    const summary = getAllAccountsQuotasSummary();
    logTest('G√©n√©ration r√©sum√© global', !!summary && summary.totalAccounts >= 0,
        summary ? `${summary.totalAccounts} comptes avec quotas d√©tect√©s` : 'ERREUR: √âchec r√©sum√©');

} catch (error) {
    logTest('Test syst√®me en fonctionnement', false, `Erreur: ${error.message}`);
}

// üéØ PHASE 5: VALIDATION FRONTEND
console.log('\nüéØ PHASE 5: VALIDATION FRONTEND');
console.log('-'.repeat(50));

try {
    const indexContent = fs.readFileSync(path.join(__dirname, 'index.html'), 'utf-8');
    
    // Test 10: V√©rifier les fonctions JavaScript
    const hasJSFunctions = [
        'loadQuotasPerAccount',
        'editAccountQuotas', 
        'saveDefaultQuotas',
        'displayQuotasSummary'
    ].every(func => indexContent.includes(`function ${func}`) || indexContent.includes(`${func} =`));
    
    logTest('Fonctions JavaScript quotas pr√©sentes', hasJSFunctions,
        hasJSFunctions ? 'Toutes les fonctions frontend impl√©ment√©es' : 'ERREUR: Fonctions JS manquantes');

    // Test 11: V√©rifier l'interface utilisateur
    const hasUIElements = [
        'totalActiveAccounts',
        'totalCreditsUsed', 
        'totalActionsToday',
        'quotasAccountsList',
        'defaultDailyLimit'
    ].every(id => indexContent.includes(`id="${id}"`));
    
    logTest('√âl√©ments interface utilisateur pr√©sents', hasUIElements,
        hasUIElements ? 'Interface compl√®te impl√©ment√©e' : 'ERREUR: √âl√©ments UI manquants');

    // Test 12: V√©rifier le chargement automatique
    const hasAutoLoad = indexContent.includes('loadQuotasPerAccount()') && 
                       indexContent.includes('setInterval(loadQuotasPerAccount');
    logTest('Chargement automatique configur√©', hasAutoLoad,
        hasAutoLoad ? 'Actualisation automatique activ√©e' : 'ERREUR: Chargement automatique manquant');

} catch (error) {
    logTest('Validation frontend', false, `Erreur: ${error.message}`);
}

// üìã R√âSUM√â FINAL
console.log('\nüìã R√âSUM√â FINAL');
console.log('='.repeat(60));

const successRate = Math.round((passedTests / totalTests) * 100);
console.log(`üß™ Total des tests: ${totalTests}`);
console.log(`‚úÖ Tests r√©ussis: ${passedTests}`);
console.log(`‚ùå Tests √©chou√©s: ${failedTests}`);
console.log(`üìà Taux de r√©ussite: ${successRate}%`);

if (successRate === 100) {
    console.log('\nüéâ MIGRATION COMPL√àTEMENT R√âUSSIE!');
    console.log('üöÄ SYST√àME DE QUOTAS PAR COMPTE 100% OP√âRATIONNEL!');
    console.log('‚ú® ANCIEN SYST√àME CORRECTEMENT SUPPRIM√â!');
} else if (successRate >= 80) {
    console.log('\n‚úÖ MIGRATION LARGEMENT R√âUSSIE!');
    console.log('‚ö†Ô∏è  Quelques points mineurs √† v√©rifier.');
} else {
    console.log('\n‚ùå MIGRATION INCOMPL√àTE!');
    console.log('üîß Des corrections sont n√©cessaires.');
}

console.log('\n' + '='.repeat(60));
