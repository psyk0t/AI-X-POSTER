require('dotenv').config();
const { TwitterApi } = require('twitter-api-v2');

async function testScalabilityOAuth() {
    console.log('üöÄ Test de scalabilit√© OAuth pour 20 comptes simultan√©s\n');
    
    // Simulation des besoins pour 20 comptes
    const NOMBRE_COMPTES = 20;
    const ACTIONS_PAR_COMPTE_PAR_HEURE = 10; // likes + retweets + replies
    const RECHERCHES_PAR_COMPTE_PAR_HEURE = 5;
    
    console.log('üìä BESOINS CALCUL√âS :');
    console.log(`   üë• Comptes connect√©s : ${NOMBRE_COMPTES}`);
    console.log(`   üîÑ Actions/compte/heure : ${ACTIONS_PAR_COMPTE_PAR_HEURE}`);
    console.log(`   üîç Recherches/compte/heure : ${RECHERCHES_PAR_COMPTE_PAR_HEURE}`);
    console.log(`   üìà TOTAL actions/heure : ${NOMBRE_COMPTES * ACTIONS_PAR_COMPTE_PAR_HEURE}`);
    console.log(`   üìà TOTAL recherches/heure : ${NOMBRE_COMPTES * RECHERCHES_PAR_COMPTE_PAR_HEURE}`);
    
    console.log('\n' + '='.repeat(60) + '\n');
    
    // Test OAuth 1.0a (configuration actuelle)
    console.log('üìä OAuth 1.0a - Rate limits par APP :');
    try {
        const clientOAuth1 = new TwitterApi({
            appKey: process.env.X_API_KEY,
            appSecret: process.env.X_API_SECRET,
            accessToken: process.env.X_ACCESS_TOKEN,
            accessSecret: process.env.X_ACCESS_TOKEN_SECRET,
        });
        
        const searchResult = await clientOAuth1.v2.search('from:psyk0t', {
            max_results: 5,
            'tweet.fields': ['created_at']
        });
        
        const remaining = searchResult.rateLimit?.remaining || 0;
        const limit = searchResult.rateLimit?.limit || 0;
        const resetTime = Math.round((searchResult.rateLimit?.reset - Date.now()/1000)/60);
        
        console.log(`   üìà Rate limit recherche : ${remaining}/${limit} (reset dans ${resetTime}min)`);
        console.log(`   ‚ö†Ô∏è  PROBL√àME : Tous les comptes partagent les m√™mes limites !`);
        console.log(`   üî¥ Avec 20 comptes : ${Math.floor(limit/NOMBRE_COMPTES)} recherches/compte/15min`);
        console.log(`   üî¥ Soit : ${Math.floor((limit/NOMBRE_COMPTES)*4)} recherches/compte/heure`);
        
        if (Math.floor((limit/NOMBRE_COMPTES)*4) < RECHERCHES_PAR_COMPTE_PAR_HEURE) {
            console.log(`   ‚ùå INSUFFISANT ! Besoin de ${RECHERCHES_PAR_COMPTE_PAR_HEURE}/h, disponible ${Math.floor((limit/NOMBRE_COMPTES)*4)}/h`);
        }
        
    } catch (error) {
        console.log(`   ‚ùå Erreur OAuth 1.0a: ${error.code} - ${error.message}`);
    }
    
    console.log('\n' + '='.repeat(60) + '\n');
    
    // Test OAuth 2.0 avec Bearer Token
    console.log('üìä OAuth 2.0 - Rate limits par USER :');
    try {
        const clientOAuth2 = new TwitterApi(process.env.X_BEARER_TOKEN);
        
        const searchResult = await clientOAuth2.v2.search('from:psyk0t', {
            max_results: 5,
            'tweet.fields': ['created_at']
        });
        
        const remaining = searchResult.rateLimit?.remaining || 0;
        const limit = searchResult.rateLimit?.limit || 0;
        const resetTime = Math.round((searchResult.rateLimit?.reset - Date.now()/1000)/60);
        
        console.log(`   üìà Rate limit recherche : ${remaining}/${limit} (reset dans ${resetTime}min)`);
        console.log(`   ‚úÖ AVANTAGE : Chaque utilisateur a ses propres limites !`);
        console.log(`   üü¢ Avec 20 comptes : ${limit} recherches/compte/15min`);
        console.log(`   üü¢ Soit : ${limit*4} recherches/compte/heure`);
        
        if (limit*4 >= RECHERCHES_PAR_COMPTE_PAR_HEURE) {
            console.log(`   ‚úÖ SUFFISANT ! Besoin de ${RECHERCHES_PAR_COMPTE_PAR_HEURE}/h, disponible ${limit*4}/h`);
        }
        
    } catch (error) {
        console.log(`   ‚ùå Erreur OAuth 2.0: ${error.code} - ${error.message}`);
    }
    
    console.log('\n' + '='.repeat(60) + '\n');
    
    // Recommandations finales
    console.log('üéØ RECOMMANDATIONS POUR 20 COMPTES :');
    console.log('');
    console.log('‚ùå OAuth 1.0a (probl√©matique) :');
    console.log('   - Rate limits PARTAG√âS entre tous les comptes');
    console.log('   - Goulot d\'√©tranglement majeur');
    console.log('   - Impossible de scaler au-del√† de 3-5 comptes');
    console.log('');
    console.log('‚úÖ OAuth 2.0 (obligatoire) :');
    console.log('   - Rate limits INDIVIDUELS par utilisateur');
    console.log('   - Scalabilit√© lin√©aire');
    console.log('   - Gestion centralis√©e des permissions');
    console.log('   - Architecture multi-tenant native');
    console.log('');
    console.log('üöÄ VERDICT : Migration OAuth 2.0 INDISPENSABLE pour 20 comptes !');
    console.log('');
    console.log('üìã PROCHAINES √âTAPES :');
    console.log('   1. Impl√©menter OAuth 2.0 avec Client ID/Secret');
    console.log('   2. Tester le flow d\'authentification multi-utilisateurs');
    console.log('   3. Adapter l\'architecture pour la gestion multi-tenant');
    console.log('   4. Impl√©menter la distribution des rate limits');
}

testScalabilityOAuth().catch(console.error);
