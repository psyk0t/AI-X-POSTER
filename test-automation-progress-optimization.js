/**
 * Test des optimisations d'Automation Progress
 * V√©rifie le cache, les intervalles de refresh et le syst√®me Next Step
 */

const http = require('http');
const fs = require('fs');

// Configuration de test
const SERVER_URL = 'http://localhost:3005';
const TEST_ITERATIONS = 5;
const CACHE_TTL = 30000; // 30 secondes

console.log('üß™ Test des optimisations Automation Progress\n');

/**
 * Effectue une requ√™te HTTP GET
 */
function makeRequest(endpoint) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        
        const req = http.get(`${SERVER_URL}${endpoint}`, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                const responseTime = Date.now() - startTime;
                try {
                    const parsed = JSON.parse(data);
                    resolve({
                        statusCode: res.statusCode,
                        responseTime,
                        data: parsed,
                        cached: parsed.cached || false
                    });
                } catch (error) {
                    resolve({
                        statusCode: res.statusCode,
                        responseTime,
                        data: data,
                        cached: false
                    });
                }
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        req.setTimeout(10000, () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });
    });
}

/**
 * Test du cache TTL 30 secondes
 */
async function testCachePerformance() {
    console.log('üìä Test du cache TTL (30 secondes)...');
    
    try {
        // Premi√®re requ√™te - doit cr√©er le cache
        console.log('  ‚Üí Requ√™te 1 (cr√©ation du cache)');
        const response1 = await makeRequest('/api/automation-progress');
        console.log(`    Status: ${response1.statusCode}, Temps: ${response1.responseTime}ms, Cached: ${response1.cached}`);
        
        // Attendre 1 seconde puis faire une autre requ√™te - doit utiliser le cache
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        console.log('  ‚Üí Requ√™te 2 (utilisation du cache)');
        const response2 = await makeRequest('/api/automation-progress');
        console.log(`    Status: ${response2.statusCode}, Temps: ${response2.responseTime}ms, Cached: ${response2.cached}`);
        
        // V√©rifier que la deuxi√®me requ√™te est plus rapide et utilise le cache
        if (response2.cached && response2.responseTime < response1.responseTime) {
            console.log('  ‚úÖ Cache fonctionne correctement');
        } else {
            console.log('  ‚ö†Ô∏è  Cache pourrait ne pas fonctionner optimalement');
        }
        
        // Test des donn√©es Next Step
        if (response2.data && response2.data.data && response2.data.data.nextStep) {
            const nextStep = response2.data.data.nextStep;
            console.log(`  ‚Üí Next Step: ${nextStep.icon} ${nextStep.text} (${nextStep.status})`);
            console.log('  ‚úÖ Section Next Step pr√©sente');
        } else {
            console.log('  ‚ö†Ô∏è  Section Next Step manquante');
        }
        
    } catch (error) {
        console.log(`  ‚ùå Erreur: ${error.message}`);
    }
    
    console.log('');
}

/**
 * Test de performance sous charge
 */
async function testLoadPerformance() {
    console.log('‚ö° Test de performance sous charge...');
    
    const promises = [];
    const startTime = Date.now();
    
    // Faire 10 requ√™tes simultan√©es
    for (let i = 0; i < 10; i++) {
        promises.push(makeRequest('/api/automation-progress'));
    }
    
    try {
        const responses = await Promise.all(promises);
        const totalTime = Date.now() - startTime;
        
        const avgResponseTime = responses.reduce((sum, r) => sum + r.responseTime, 0) / responses.length;
        const cachedResponses = responses.filter(r => r.cached).length;
        
        console.log(`  ‚Üí 10 requ√™tes simultan√©es en ${totalTime}ms`);
        console.log(`  ‚Üí Temps de r√©ponse moyen: ${avgResponseTime.toFixed(2)}ms`);
        console.log(`  ‚Üí R√©ponses cach√©es: ${cachedResponses}/10`);
        
        if (avgResponseTime < 100 && cachedResponses > 5) {
            console.log('  ‚úÖ Performance optimale');
        } else {
            console.log('  ‚ö†Ô∏è  Performance pourrait √™tre am√©lior√©e');
        }
        
    } catch (error) {
        console.log(`  ‚ùå Erreur: ${error.message}`);
    }
    
    console.log('');
}

/**
 * Test de la structure des donn√©es
 */
async function testDataStructure() {
    console.log('üîç Test de la structure des donn√©es...');
    
    try {
        const response = await makeRequest('/api/automation-progress');
        
        if (response.statusCode === 200 && response.data && response.data.data) {
            const data = response.data.data;
            
            // V√©rifier les sections requises
            const requiredSections = ['currentStep', 'nextStep', 'lastSuccess', 'errors', 'tokens', 'mutes', 'quotaSystem'];
            const missingSections = requiredSections.filter(section => !data[section]);
            
            if (missingSections.length === 0) {
                console.log('  ‚úÖ Toutes les sections pr√©sentes');
                
                // V√©rifier la structure de nextStep
                if (data.nextStep && data.nextStep.icon && data.nextStep.text && data.nextStep.status) {
                    console.log('  ‚úÖ Structure Next Step correcte');
                    console.log(`    ‚Üí ${data.nextStep.icon} ${data.nextStep.text}`);
                } else {
                    console.log('  ‚ö†Ô∏è  Structure Next Step incompl√®te');
                }
                
            } else {
                console.log(`  ‚ùå Sections manquantes: ${missingSections.join(', ')}`);
            }
            
        } else {
            console.log('  ‚ùå R√©ponse invalide ou erreur HTTP');
        }
        
    } catch (error) {
        console.log(`  ‚ùå Erreur: ${error.message}`);
    }
    
    console.log('');
}

/**
 * Test du scheduler stats
 */
async function testSchedulerStats() {
    console.log('üìÖ Test des stats du scheduler...');
    
    try {
        const automation = require('./services/automation.js');
        
        if (typeof automation.getSchedulerStats === 'function') {
            const stats = await automation.getSchedulerStats();
            
            if (stats) {
                console.log('  ‚úÖ Scheduler stats disponibles');
                console.log(`    ‚Üí Comptes planifi√©s: ${stats.plannedAccounts || 0}`);
                console.log(`    ‚Üí Slots totaux: ${stats.totalSlots || 0}`);
                console.log(`    ‚Üí Slots utilis√©s: ${stats.usedSlots || 0}`);
                
                if (stats.nextAction) {
                    console.log(`    ‚Üí Prochaine action: ${stats.nextAction.type} par @${stats.nextAction.account} dans ${stats.nextAction.timeUntil}`);
                    console.log('  ‚úÖ Next Action calcul√©e');
                } else {
                    console.log('  ‚ö†Ô∏è  Aucune prochaine action trouv√©e');
                }
            } else {
                console.log('  ‚ö†Ô∏è  Stats scheduler nulles');
            }
        } else {
            console.log('  ‚ùå Fonction getSchedulerStats non disponible');
        }
        
    } catch (error) {
        console.log(`  ‚ùå Erreur: ${error.message}`);
    }
    
    console.log('');
}

/**
 * Fonction principale de test
 */
async function runTests() {
    console.log('D√©marrage des tests...\n');
    
    // V√©rifier que le serveur est accessible
    try {
        await makeRequest('/');
        console.log('‚úÖ Serveur accessible\n');
    } catch (error) {
        console.log('‚ùå Serveur non accessible. Assurez-vous que le serveur est d√©marr√© sur le port 3000.\n');
        return;
    }
    
    // Ex√©cuter les tests
    await testSchedulerStats();
    await testCachePerformance();
    await testLoadPerformance();
    await testDataStructure();
    
    console.log('üéâ Tests termin√©s!');
    
    // R√©sum√© des optimisations
    console.log('\nüìã R√©sum√© des optimisations impl√©ment√©es:');
    console.log('  ‚úÖ Cache TTL 30 secondes sur /api/automation-progress');
    console.log('  ‚úÖ Section Next Step avec calcul temps restant');
    console.log('  ‚úÖ Intervalles de refresh dynamiques (30s actif, 2min inactif)');
    console.log('  ‚úÖ Filtrage intelligent des logs pour Last Success');
    console.log('  ‚úÖ Remplacement des IDs par les usernames');
    console.log('  ‚úÖ Gestion d\'erreurs et fallbacks gracieux');
}

// Ex√©cuter les tests
runTests().catch(console.error);
