require('dotenv').config();
const { TwitterApi } = require('twitter-api-v2');
const fs = require('fs');
const path = require('path');

/**
 * Test sp√©cifique pour diagnostiquer les permissions OAuth 2.0 pour les actions
 */

async function testOAuth2Actions() {
    console.log('üîç Test des permissions OAuth 2.0 pour les actions\n');
    
    // Charger les utilisateurs OAuth 2.0 connect√©s
    const oauth2UsersFile = path.join(__dirname, 'oauth2-users.json');
    
    if (!fs.existsSync(oauth2UsersFile)) {
        console.log('‚ùå Aucun utilisateur OAuth 2.0 trouv√©');
        console.log('   Connectez d\'abord un compte via OAuth 2.0');
        return;
    }
    
    const oauth2Data = JSON.parse(fs.readFileSync(oauth2UsersFile, 'utf8'));
    
    if (!oauth2Data || oauth2Data.length === 0) {
        console.log('‚ùå Aucun utilisateur OAuth 2.0 dans le fichier');
        return;
    }
    
    // Le fichier contient un array de [id, userData]
    const userEntry = oauth2Data[0]; // Premier utilisateur
    const user = userEntry[1]; // Les donn√©es utilisateur sont dans le second √©l√©ment
    console.log(`üë§ Test avec utilisateur OAuth 2.0: @${user.username}`);
    console.log(`üîë Access Token: ${user.accessToken.substring(0, 20)}...`);
    
    // Cr√©er le client OAuth 2.0
    const client = new TwitterApi(user.accessToken);
    
    let successCount = 0;
    let errorCount = 0;
    
    // Test 1: Informations utilisateur (users.read)
    console.log('\nüìã Test 1: Lecture informations utilisateur (users.read)');
    try {
        const me = await client.v2.me();
        console.log(`‚úÖ Succ√®s: @${me.data.username} (ID: ${me.data.id})`);
        successCount++;
    } catch (error) {
        console.log(`‚ùå √âchec: ${error.code} - ${error.message}`);
        console.log(`   D√©tails: ${JSON.stringify(error.data || {}, null, 2)}`);
        errorCount++;
    }
    
    // Test 2: Informations utilisateur √©tendues
    console.log('\nüë§ Test 2: Informations utilisateur √©tendues');
    try {
        const me = await client.v2.me({
            'user.fields': ['public_metrics', 'verified', 'description']
        });
        console.log(`‚úÖ Succ√®s: Followers: ${me.data.public_metrics?.followers_count || 'N/A'}`);
        successCount++;
    } catch (error) {
        console.log(`‚ùå √âchec: ${error.code} - ${error.message}`);
        errorCount++;
    }
    
    // Test 3: Lecture de tweets (tweet.read)
    console.log('\nüê¶ Test 3: Lecture de tweets (tweet.read)');
    try {
        const tweets = await client.v2.search('hello', { max_results: 10 });
        console.log(`‚úÖ Succ√®s: ${tweets.data?.data?.length || 0} tweets trouv√©s`);
        successCount++;
    } catch (error) {
        console.log(`‚ùå √âchec: ${error.code} - ${error.message}`);
        errorCount++;
    }
    
    // Test 4: Capacit√© de like (like.write) - SIMULATION
    console.log('\n‚ù§Ô∏è Test 4: Capacit√© de like (like.write) - SIMULATION');
    try {
        // On ne fait pas vraiment l'action, juste on teste l'acc√®s √† l'API
        const rwClient = client.readWrite;
        console.log(`‚úÖ Client Read/Write cr√©√© avec succ√®s`);
        console.log(`   Pr√™t pour: likes, retweets, replies`);
        successCount++;
    } catch (error) {
        console.log(`‚ùå √âchec cr√©ation client RW: ${error.message}`);
        errorCount++;
    }
    
    // Test 5: V√©rification des scopes accord√©s
    console.log('\nüîê Test 5: V√©rification des scopes accord√©s');
    try {
        // Essayer diff√©rentes op√©rations pour d√©tecter les scopes
        const me = await client.v2.me();
        console.log(`‚úÖ users.read: OK`);
        
        const tweets = await client.v2.search('test', { max_results: 10 });
        console.log(`‚úÖ tweet.read: OK`);
        
        successCount++;
    } catch (error) {
        console.log(`‚ùå √âchec v√©rification scopes: ${error.message}`);
        errorCount++;
    }
    
    console.log('\nüìä R√âSUM√â DES TESTS');
    console.log('==================================================');
    console.log(`‚úÖ Tests r√©ussis: ${successCount}`);
    console.log(`‚ùå Tests √©chou√©s: ${errorCount}`);
    console.log(`üìà Taux de r√©ussite: ${Math.round((successCount / (successCount + errorCount)) * 100)}%`);
    
    console.log('\nüéØ DIAGNOSTIC:');
    console.log('==================================================');
    
    if (errorCount === 0) {
        console.log('üéâ PARFAIT! OAuth 2.0 fonctionne compl√®tement');
        console.log('   Toutes les permissions sont accord√©es');
    } else if (successCount > 0) {
        console.log('‚ö†Ô∏è SUCC√àS PARTIEL:');
        console.log('   ‚Ä¢ Certaines permissions fonctionnent');
        console.log('   ‚Ä¢ D\'autres sont bloqu√©es (403)');
        console.log('\nüîß SOLUTIONS POSSIBLES:');
        console.log('1. V√©rifiez les permissions de votre app Twitter');
        console.log('2. Assurez-vous que "Read and write" est activ√©');
        console.log('3. Reconnectez le compte OAuth 2.0 avec les nouveaux scopes');
    } else {
        console.log('‚ùå √âCHEC COMPLET:');
        console.log('   Aucune permission OAuth 2.0 ne fonctionne');
        console.log('\nüîß ACTIONS REQUISES:');
        console.log('1. V√©rifiez votre configuration Twitter App');
        console.log('2. V√©rifiez les Client ID/Secret dans .env');
        console.log('3. R√©g√©n√©rez les tokens OAuth 2.0');
    }
    
    console.log('\nüìã INFORMATIONS TECHNIQUES:');
    console.log(`   User ID: ${user.id}`);
    console.log(`   Username: @${user.username}`);
    console.log(`   Auth Method: ${user.authMethod || 'oauth2'}`);
    console.log(`   Connected: ${new Date(user.addedAt).toLocaleString()}`);
}

// Ex√©cuter le test
if (require.main === module) {
    testOAuth2Actions().catch(console.error);
}

module.exports = { testOAuth2Actions };
