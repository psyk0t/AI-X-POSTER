/**
 * Script de correction d'urgence pour la boucle infinie du scheduler
 * Nettoie les actions diff√©r√©es corrompues et red√©marre le syst√®me
 */

const fs = require('fs');
const path = require('path');

async function fixSchedulerLoop() {
    console.log('üîß [FIX-SCHEDULER] D√©marrage du script de correction...');
    
    try {
        // 1. Charger le module automation pour acc√©der au scheduler
        const automation = require('./services/automation');
        
        // 2. V√©rifier si actionScheduler existe
        if (automation.actionScheduler) {
            console.log('üìã [FIX-SCHEDULER] ActionScheduler trouv√©, nettoyage en cours...');
            
            // 3. Forcer le nettoyage complet des actions diff√©r√©es
            const cleanedActions = automation.actionScheduler.forceCleanupAllDeferredActions();
            console.log(`‚úÖ [FIX-SCHEDULER] ${cleanedActions} actions diff√©r√©es supprim√©es`);
            
            // 4. Red√©marrer le processeur d'actions diff√©r√©es
            automation.actionScheduler.startDeferredActionsProcessor();
            console.log('üîÑ [FIX-SCHEDULER] Processeur d\'actions diff√©r√©es red√©marr√©');
            
        } else {
            console.log('‚ö†Ô∏è  [FIX-SCHEDULER] ActionScheduler non initialis√©');
        }
        
        // 5. V√©rifier les logs r√©cents pour confirmer la correction
        const logFile = path.join(__dirname, 'auto-actions.log');
        if (fs.existsSync(logFile)) {
            const logContent = fs.readFileSync(logFile, 'utf8');
            const recentLogs = logContent.split('\n').slice(-50);
            const loopErrors = recentLogs.filter(line => 
                line.includes('Cannot read properties of undefined') ||
                line.includes('Action reprogramm√©e pour')
            );
            
            console.log(`üìä [FIX-SCHEDULER] Erreurs de boucle dans les 50 derni√®res lignes: ${loopErrors.length}`);
        }
        
        console.log('‚úÖ [FIX-SCHEDULER] Correction termin√©e avec succ√®s');
        console.log('üí° [FIX-SCHEDULER] Le syst√®me devrait maintenant fonctionner sans boucle infinie');
        
    } catch (error) {
        console.error('‚ùå [FIX-SCHEDULER] Erreur lors de la correction:', error.message);
        console.log('üîÑ [FIX-SCHEDULER] Red√©marrage du serveur recommand√© si le probl√®me persiste');
    }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
    fixSchedulerLoop();
}

module.exports = { fixSchedulerLoop };
